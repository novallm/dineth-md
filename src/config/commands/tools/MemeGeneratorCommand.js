const Command = require('../../structures/Command');
const { downloadMediaMessage } = require('@adiwajshing/baileys');
const sharp = require('sharp');
const path = require('path');
const fs = require('fs').promises;

class MemeGeneratorCommand extends Command {
    constructor() {
        super({
            name: 'meme',
            aliases: ['makememe', 'memegen'],
            description: 'Create custom memes',
            category: 'tools',
            usage: '.meme <top text> | <bottom text>'
        });
    }

    async execute(message, args) {
        if (!message.quoted || !args.length) {
            return message.reply(`‚ï≠‚îÄ‚ùí „Äé MEME GENERATOR „Äè ‚ùí
‚îÇ
‚îú‚îÄ‚ùí üé® *Usage:*
‚îÇ .meme <top> | <bottom>
‚îÇ (Reply to an image)
‚îÇ
‚îú‚îÄ‚ùí üìù *Example:*
‚îÇ .meme Me | Also Me
‚îÇ
‚îú‚îÄ‚ùí üîç *Features:*
‚îÇ ‚Ä¢ Custom text
‚îÇ ‚Ä¢ Auto text sizing
‚îÇ ‚Ä¢ Impact font
‚îÇ
‚îú‚îÄ‚ùí ‚ú® *Powered by:* Dineth MD
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùí`);
        }

        const [topText, bottomText] = args.join(' ').split('|').map(text => text.trim());

        try {
            const buffer = await downloadMediaMessage(message.quoted, 'buffer');
            const outputPath = path.join(__dirname, `../../../temp/${Date.now()}.jpg`);

            // Add text to image using sharp
            await sharp(buffer)
                .resize(800, 800, { fit: 'inside' })
                .composite([
                    {
                        input: await this.createTextOverlay(topText, 'top'),
                        top: 10,
                        left: 0
                    },
                    {
                        input: await this.createTextOverlay(bottomText, 'bottom'),
                        bottom: 10,
                        left: 0
                    }
                ])
                .toFile(outputPath);

            await message.client.sendMessage(message.key.remoteJid, {
                image: { url: outputPath },
                caption: '‚ú® Generated by Dineth MD'
            });

            await fs.unlink(outputPath);

        } catch (error) {
            console.error('Meme generation error:', error);
            message.reply('‚ùå Failed to generate meme.');
        }
    }

    async createTextOverlay(text, position) {
        // Implementation for creating text overlay with Impact font
        // This would use sharp's SVG text rendering capabilities
        return Buffer.from(`
            <svg width="800" height="100">
                <style>
                    .text { 
                        font-family: Impact; 
                        font-size: 48px; 
                        fill: white; 
                        stroke: black;
                        stroke-width: 2px;
                        text-anchor: middle;
                    }
                </style>
                <text x="400" y="50" class="text">${text}</text>
            </svg>
        `);
    }
}

module.exports = MemeGeneratorCommand; 