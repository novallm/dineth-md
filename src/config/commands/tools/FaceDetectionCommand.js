const Command = require('../../structures/Command');
const { downloadMediaMessage } = require('@adiwajshing/baileys');
const axios = require('axios');
const path = require('path');
const fs = require('fs').promises;

class FaceDetectionCommand extends Command {
    constructor() {
        super({
            name: 'facedetect',
            aliases: ['face'],
            description: 'Detect faces in images',
            category: 'tools',
            usage: '.facedetect <reply to image>'
        });
    }

    async execute(message) {
        if (!message.quoted) {
            return message.reply(`‚ï≠‚îÄ‚ùí „Äé FACE DETECTION „Äè ‚ùí
‚îÇ
‚îú‚îÄ‚ùí üì∏ *Usage:*
‚îÇ .facedetect
‚îÇ (Reply to an image)
‚îÇ
‚îú‚îÄ‚ùí ‚ú® *Powered by:* Dineth MD
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùí`);
        }

        try {
            const buffer = await downloadMediaMessage(message.quoted, 'buffer');
            const inputPath = path.join(__dirname, `../../../temp/input_${Date.now()}.jpg`);
            await fs.writeFile(inputPath, buffer);

            await message.reply('üîç *Detecting faces...*');

            const response = await axios.post('https://api.faceapi.com/detect', {
                image: inputPath
            });

            const faces = response.data.faces;
            let resultText = `üë§ *Detected Faces:*\n`;

            faces.forEach((face, index) => {
                resultText += `Face ${index + 1}: ${face.confidence}% confidence\n`;
            });

            await message.reply(resultText + '‚ú® Processed by Dineth MD');

            // Cleanup
            await fs.unlink(inputPath);

        } catch (error) {
            console.error('Face detection error:', error);
            message.reply('‚ùå Failed to detect faces.');
        }
    }
}

module.exports = FaceDetectionCommand; 